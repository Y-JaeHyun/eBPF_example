//go:build linux
// +build linux

// This program demonstrates attaching a fentry eBPF program to
// tcp_close and reading the RTT from the TCP socket using CO-RE helpers.
// It prints the IPs/ports/RTT information
// once the host closes a TCP connection.
// It supports only IPv4 for this example.
//
// Sample output:
//
// examples# go run -exec sudo ./tcprtt
// 2022/03/19 22:30:34 Src addr        Port   -> Dest addr       Port   RTT
// 2022/03/19 22:30:36 10.0.1.205      50578  -> 117.102.109.186 5201   195
// 2022/03/19 22:30:53 10.0.1.205      0      -> 89.84.1.178     9200   30
// 2022/03/19 22:30:53 10.0.1.205      36022  -> 89.84.1.178     9200   28

package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/internal"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/rlimit"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc clang -cflags -O2 -type event -type pid_comm_t -type ipv4_tuple_t bpf tcp_connect.c -- -I../headers

func main() {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	/*link, err := link.AttachTracing(link.TracingOptions{
		Program: objs.bpfPrograms.TcpClose,
	})
	*/

	link1, err := link.Kprobe("tcp_v4_connect", objs.KprobeTcpV4Connect, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer link1.Close()

	link2, err := link.Kretprobe("tcp_v4_connect", objs.KretprobeTcpV4Connect, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer link2.Close()

	link3, err := link.Kprobe("tcp_close", objs.TcpClose, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer link3.Close()

	link4, err := link.Kretprobe("inet_csk_accept", objs.KretprobeInetCskAccept, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer link4.Close()

	link5, err := link.Kprobe("inet_csk_accept", objs.KprobeInetCskAccept, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer link5.Close()

	link6, err := link.Kprobe("tcp_set_state", objs.KprobeTcpSetState, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer link6.Close()

	link7, err := link.Kprobe("tcp_sendmsg", objs.KprobeTcpSendmsg, nil)
	if err != nil {
		fmt.Println(err)
		log.Fatal(err)
	}
	defer link7.Close()

	link8, err := link.Kretprobe("tcp_sendmsg", objs.KretprobeTcpSendmsg, nil)
	if err != nil {
		fmt.Println(err)
		log.Fatal(err)
	}
	defer link8.Close()

	log.Printf("%-15s %-6s -> %-15s %-6s %-6s",
		"Src addr",
		"Port",
		"Dest addr",
		"Port",
		"RTT",
	)

	go readLoop(objs)
	go readLoop2(objs)
	go readLoop3(objs)
	go readLoop4(objs)

	// Wait
	<-stopper
}

func readLoop(objs bpfObjects) {
	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		if err := objs.Events.LookupAndDelete(nil, &event); err != nil {
			continue
		}

		log.Printf("close : %-15s %-6d -> %-15s %-6d %-6d %-6d",
			intToIP(event.Saddr),
			event.Sport,
			intToIP(event.Daddr),
			event.Dport,
			event.Srtt,
			//			event.MdevUs,
		)
	}
}

func readLoop2(objs bpfObjects) {
	var pid bpfPidCommT
	var ipv4Tuple bpfIpv4TupleT
	for {
		iter := objs.TuplepidIpv4.Iterate()
		if iter == nil {
			continue
		}

		if iter.Next(&ipv4Tuple, &pid) == false {
			continue
		}

		objs.TuplepidIpv4.Delete(ipv4Tuple)

		log.Printf("connect : %-15s %-6d -> %-15s %-6d %-6d %-6d",
			intToIP(ipv4Tuple.Saddr),
			ipv4Tuple.Sport,
			intToIP(ipv4Tuple.Daddr),
			ipv4Tuple.Dport,
			ipv4Tuple.Netns,
			//			event.MdevUs,
		)
	}
}

func readLoop3(objs bpfObjects) {
	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		if err := objs.Events2.LookupAndDelete(nil, &event); err != nil {
			continue
		}

		log.Printf("accept : %-15s %-6d -> %-15s %-6d %-6d %-6d",
			intToIP(event.Saddr),
			event.Sport,
			intToIP(event.Daddr),
			event.Dport,
			event.Srtt,
			//			event.MdevUs,
		)
	}
}

func readLoop4(objs bpfObjects) {
	var pid bpfPidCommT
	var ipv4Tuple bpfIpv4TupleT
	for {
		iter := objs.SendCheckIpv4.Iterate()
		if iter == nil {
			continue
		}

		if iter.Next(&ipv4Tuple, &pid) == false {
			continue
		}

		objs.SendCheckIpv4.Delete(ipv4Tuple)

		log.Printf("send : %-15s %-6d -> %-15s %-6d %-6d %-6d",
			intToIP(ipv4Tuple.Saddr),
			ipv4Tuple.Sport,
			intToIP(ipv4Tuple.Daddr),
			ipv4Tuple.Dport,
			ipv4Tuple.Netns,
			//			event.MdevUs,
		)
	}
}

func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	internal.NativeEndian.PutUint32(ip, ipNum)
	return ip
}
